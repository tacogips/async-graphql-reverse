// DO NOT EDIT THIS FILE
// This file was generated by https://github.com/tacogips/async-graphql-reverse
use super::enums::Sex;
use super::enums::UserType;
use super::input_objects::CreateFriendMutationInput;
use crate::datasource::DataSource;
use async_graphql::*;
#[derive(Debug, Clone)]
pub struct Query {}
#[Object]
impl Query {
    ///me: Single-line comment
    pub async fn me(&self, ctx: &Context<'_>) -> Result<Me> {
        ctx.data_unchecked::<DataSource>().query_me(ctx, self).await
    }
    pub async fn active(&self, ctx: &Context<'_>) -> Result<bool> {
        ctx.data_unchecked::<DataSource>()
            .query_active(ctx, self)
            .await
    }
    ///this is comment for field
    ///multi line comment:
    pub async fn r#type(&self, ctx: &Context<'_>) -> Result<Option<String>> {
        ctx.data_unchecked::<DataSource>()
            .query_type(ctx, self)
            .await
    }
    pub async fn custom_resolver(&self, ctx: &Context<'_>) -> Result<Option<String>> {
        ctx.data_unchecked::<DataSource>()
            .query_custom_resolver(ctx, self)
            .await
    }
}
///this is comment for input object
///
///multi line
#[derive(Debug, Clone)]
pub struct Mutation {}
#[Object]
impl Mutation {
    pub async fn create_friend_mutation(
        &self,
        ctx: &Context<'_>,
        input: CreateFriendMutationInput,
    ) -> Result<Option<CreateFriendMutationPayload>> {
        ctx.data_unchecked::<DataSource>()
            .mutation_create_friend_mutation(ctx, self, input)
            .await
    }
}
#[derive(Debug, Clone)]
pub struct Subscription {
    pub badge: i64,
}
#[Object]
impl Subscription {
    pub async fn badge(&self) -> i64 {
        self.badge
    }
}
///this is comment for object
#[derive(Debug, Clone)]
pub struct CreateFriendMutationPayload {}
#[Object]
impl CreateFriendMutationPayload {
    pub async fn friend(&self, ctx: &Context<'_>) -> Result<Friend> {
        ctx.data_unchecked::<DataSource>()
            .create_friend_mutation_payload_friend(ctx, self)
            .await
    }
}
#[derive(Debug, Clone)]
pub struct Me {
    pub id: ID,
    pub email: Option<String>,
    pub is_active: bool,
}
#[Object]
impl Me {
    pub async fn id(&self) -> ID {
        self.id.clone()
    }
    pub async fn user_type(&self, ctx: &Context<'_>) -> Result<Option<UserType>> {
        ctx.data_unchecked::<DataSource>()
            .me_user_type(ctx, self)
            .await
    }
    pub async fn email(&self) -> Option<String> {
        self.email.clone()
    }
    pub async fn is_active(&self) -> bool {
        self.is_active
    }
}
#[derive(Debug, Clone)]
pub struct Friend {
    pub id: ID,
    pub is_active: bool,
    this_is_a_hidden_field: String,
    this_is_another_hidden_field: i64,
}
#[Object]
impl Friend {
    pub async fn id(&self) -> ID {
        self.id.clone()
    }
    pub async fn name(&self, ctx: &Context<'_>) -> Result<String> {
        ctx.data_unchecked::<DataSource>()
            .friend_name(ctx, self)
            .await
    }
    pub async fn sex(&self, ctx: &Context<'_>) -> Result<Sex> {
        ctx.data_unchecked::<DataSource>()
            .friend_sex(ctx, self)
            .await
    }
    pub async fn user_type(&self, ctx: &Context<'_>) -> Result<Option<UserType>> {
        ctx.data_unchecked::<DataSource>()
            .friend_user_type(ctx, self)
            .await
    }
    pub async fn others(&self, ctx: &Context<'_>) -> Result<Option<Vec<Option<Friend>>>> {
        ctx.data_unchecked::<DataSource>()
            .friend_others(ctx, self)
            .await
    }
    pub async fn is_active(&self) -> bool {
        self.is_active
    }
}
#[derive(Debug, Clone)]
pub struct FriendConnection {
    pub total_count: i64,
}
#[Object]
impl FriendConnection {
    pub async fn total_count(&self) -> i64 {
        self.total_count
    }
    pub async fn nodes(&self, ctx: &Context<'_>) -> Result<Vec<Option<Friend>>> {
        ctx.data_unchecked::<DataSource>()
            .friend_connection_nodes(ctx, self)
            .await
    }
}
#[derive(Debug, Clone)]
pub struct Notification {
    pub id: ID,
    pub title: String,
}
#[Object]
impl Notification {
    pub async fn id(&self) -> ID {
        self.id.clone()
    }
    pub async fn title(&self) -> String {
        self.title.clone()
    }
    pub async fn friends(
        &self,
        ctx: &Context<'_>,
        first: Option<i64>,
        num: Option<i64>,
    ) -> Result<FriendConnection> {
        ctx.data_unchecked::<DataSource>()
            .notification_friends(ctx, self, first, num)
            .await
    }
}
