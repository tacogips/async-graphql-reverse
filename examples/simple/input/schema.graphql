schema {
  query: Query
  mutation: Mutation
}

enum Status {
  REGISTERED
  EMAIL_VERIFIED
}

type Query {
  "me: Single-line comment"
  me: Me!
  active: Boolean!

  """
  this is comment for field
  multi line comment:
  """
  type: String
}

type WillBeIgnoredType {
  status: Status!
}

enum IgnoreStatus {
  Some
}

"""
this is comment for input object

multi line
"""
type Mutation {
  createFriendMutation(
    input: CreateFriendMutationInput!
  ): CreateFriendMutationPayload
}

type Subscription {
  badge: Int!
}

"""
this is comment for object
"""
type CreateFriendMutationPayload
  @model(queries: null, mutations: null, subscriptions: null) {
  friend: Friend!
}

"""
comment for object
in multi line
"""
input CreateFriendMutationInput {
  userId: ID!
  ignore_input: WillBeIgnoredType
}

input RecursiveInput {
  id: String
  input1: RecursiveInput
  input2: [RecursiveInput]
}

scalar Url

interface User {
  id: ID!
  name: String!
}

type Friend implements User {
  id: ID!
  name: String!
  others: [Friend]
}

type FriendConnection {
  totalCount: Int!
  nodes: [Friend]!
}

type Me implements User {
  id: ID!
  name: String!
  rank: Float!
  email: String
  age: Int
  active: Boolean
  friends(first: Int): FriendConnection!
  notifications: [Notification]
  web: Url
  search(text: String!): [SearchResult]!
  searchSecond(text: String!): [SearchResult!]
  status: Status
  ignore_status: WillBeIgnoredType
  ignore_enum: IgnoreStatus
}

type Notification {
  id: ID!
  title: String!
  friends(first: Int, num: Int): FriendConnection!
}

union SearchResult = Friend | Notification
